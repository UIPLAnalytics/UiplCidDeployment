{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "4ce71984-dabb-47cc-b1bd-fe1f96c171aa": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -1490,
                    "y": -190
                },
                "z": 0,
                "embeds": []
            },
            "558d1212-774b-4c98-bec1-4ab9058f2985": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -1220,
                    "y": -190
                },
                "z": 0,
                "embeds": []
            },
            "e5b7237b-8960-4db1-b511-a38191c2190b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -1360,
                    "y": -190
                },
                "z": 0,
                "embeds": []
            },
            "f2d623d3-c131-4915-980f-4ffe98f59668": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -1590,
                    "y": -190
                },
                "z": 0,
                "embeds": []
            },
            "d764092e-f007-4f19-a515-8ddeeb52f866": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -1490,
                    "y": -100
                },
                "z": 0,
                "embeds": []
            },
            "91c71044-adeb-493c-9884-20a6336c0a6c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -1590,
                    "y": -100
                },
                "z": 0,
                "embeds": []
            }
        },
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Common Parameters"
                    },
                    "Parameters": [
                        "WorkGroup",
                        "AthenaDataCatalog",
                        "MonthDuration",
                        "TagValue",
                        "CURTableName",
                        "DatabaseName",
                        "IsSharedCostIDReq",
                        "LambdaRunParameterSuffix"
                    ]
                },
                {
                    "Label": {
                        "default": "Dashboard Parameters."
                    },
                    "Parameters": [
                        "VTgtAccountId",
                        "VTgtRegion",
                        "VRole",
                        "VUser",
                        "VRoleRegion"
                    ]
                },
                {
                    "Label": {
                        "default": "Dashboard Parameters. Please do not change."
                    },
                    "Parameters": [
                        "VAnalysisId",
                        "VDashboardId",
                        "VTgtDataSourceId",
                        "VTargetDatasetId",
                        "VSrcEnv",
                        "VTargetEnv",
                        "VMigrateAnalysis",
                        "VMigrateDashboard",
                        "VMigrateDataset"
                    ]
                }
            ],
            "ParameterLabels": {
                "WorkGroup": {
                    "default": "Athena WorkGroup Name - Please do not change"
                },
                "AthenaDataCatalog": {
                    "default": "Athena Data Catalog Name - Please do not change"
                },
                "MonthDuration": {
                    "default": "Month Duration"
                },
                "TagValue": {
                    "default": "Tag Column Name"
                },
                "CURTableName": {
                    "default": "Cur Table Name - Please do not change"
                },
                "DatabaseName": {
                    "default": "Database Name - Please do not change"
                },
                "IsSharedCostIDReq": {
                    "default": "Is Shared Cost Required?"
                },
                "VTgtAccountId": {
                    "default": "Target Account ID"
                },
                "VTgtRegion": {
                    "default": "Target Region"
                },
                "VRole": {
                    "default": "Role"
                },
                "VUser": {
                    "default": "User"
                },
                "VRoleRegion": {
                    "default": "Role Region"
                },
                "VTgtDataSourceId": {
                    "default": "Target Data source ID"
                },
                "VTargetDatasetId": {
                    "default": " Target Dataset ID"
                },
                "VAnalysisId": {
                    "default": "Analysis ID"
                },
                "VDashboardId": {
                    "default": "Dashboard Id"
                },
                "VSrcEnv": {
                    "default": "Source Environment"
                },
                "VTargetEnv": {
                    "default": "Target Environment"
                },
                "VMigrateDataset": {
                    "default": "Migrate Dataset"
                },
                "VMigrateAnalysis": {
                    "default": "Migrate Analysis"
                },
                "VMigrateDashboard": {
                    "default": "Migrate Dashboard"
                },
                "LambdaRunParameterSuffix": {
                    "default": "Lambda Run Parameter Suffix"
                }
            }
        }
    },
    "Resources": {
        "LambdaIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Description": "This IAM role is for lambda to access services.",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Policies" : [
                    {
                        "PolicyDocument" : {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Statement1",
                                    "Effect": "Allow",
                                    "Action": [
                                        "athena:StartQueryExecution",
                                        "athena:GetQueryExecution",
                                        "s3:GetBucketLocation",
                                        "s3:PutObject",
                                        "glue:GetTable",
                                        "glue:UpdateTable",
                                        "glue:DeleteTable",
                                        "glue:CreateTable"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName" : "CfLambdaAccessPolicy"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4ce71984-dabb-47cc-b1bd-fe1f96c171aa"
                }
            }
        },
        "AthenaQueryRunLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "ATHENA_QUERY_AND_DASHBOARD_RUN_LAMBDA",
                "Description": "This function will run athena queries.",
                "Runtime": "python3.9",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIamRole",
                        "Arn"
                    ]
                },
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Timeout": 900,
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "import time",
                                "import cfnresponse",
                                "import traceback",
                                "import base64",
                                "# from configparser import ConfigParser",
                                "# from QuickSightMigration import QuickSightMigration",
                                "# import sys",
                                "# from awsglue.utils import getResolvedOptions",
                                "",
                                "",
                                "class QuickSightMigration:",
                                "    ",
                                "    # default constructor",
                                "    def __init__(self,config):       ",
                                "    ",
                                "        #Initialize the variables and Instantiate the QuickSight Clients using boto3 ",
                                "        #Populate the current session values for the variables below and generate the instances for Resource, session and client",
                                "",
                                "        #config = configparser.ConfigParser()",
                                "        #config.sections()",
                                "        #config.read('config.ini')",
                                "",
                                "        #Set the variables for the source and target account_id, role, username, the analysis and dashboard id that we need to migrate",
                                "        self.v_src_account_id=config['variable']['v_src_account_id']",
                                "        self.v_src_region = config['variable']['v_src_region']",
                                "        self.v_analysis_id=config['variable']['v_analysis_id']",
                                "        self.v_dashboard_id=config['variable']['v_dashboard_id']",
                                "        self.v_tgt_account_id=config['variable']['v_tgt_account_id']",
                                "        self.v_tgt_region = config['variable']['v_tgt_region']",
                                "        self.v_src_env=config['variable']['v_target_env'] #values in ['np','prod','sb']",
                                "        self.v_target_env=config['variable']['v_src_env']",
                                "        self.v_role=config['variable']['v_role']",
                                "        self.v_user=config['variable']['v_user']       ",
                                "        self.v_role_region=config['variable']['v_role_region']",
                                "        #v_user='shwetag@umbrellainfocare.com'       ",
                                "        self.v_tgt_data_source_id = config['variable']['v_tgt_data_source_id']",
                                "        #self.v_target_schema_name = config['variable']['v_target_schema_name']",
                                "        self.v_target_dataset_id = config['variable']['v_target_dataset_id']",
                                "",
                                "        '''",
                                "        Populate the variable values from source AWS instance ( Internal)",
                                "        '''",
                                "        sv_aws_access_key_id= config['source']['sv_aws_access_key_id']",
                                "",
                                "        sv_aws_secret_access_key=config['source']['sv_aws_secret_access_key']",
                                "",
                                "        s3 = boto3.resource('s3',",
                                "            aws_access_key_id=sv_aws_access_key_id,",
                                "            aws_secret_access_key=sv_aws_secret_access_key) ",
                                "        #s3 = boto3.resource('s3')",
                                "",
                                "        s3_session=boto3.Session(aws_access_key_id=sv_aws_access_key_id,aws_secret_access_key=sv_aws_secret_access_key,region_name = self.v_src_region)",
                                "        #s3_session=boto3.Session(region_name = 'us-east-1')",
                                "",
                                "        #client = boto3.client('quicksight',region_name='us-east-1')",
                                "        self.client = boto3.client('quicksight',aws_access_key_id=sv_aws_access_key_id,aws_secret_access_key=sv_aws_secret_access_key,region_name = self.v_src_region)",
                                "",
                                "        '''",
                                "        Populate the variable values from target AWS instance ( Analytics)",
                                "        '''",
                                "        tgt_aws_access_key_id=config['target']['tgt_aws_access_key_id']",
                                "        tgt_aws_secret_access_key=config['target']['tgt_aws_secret_access_key']",
                                "",
                                "        tgt_s3 = boto3.resource('s3',",
                                "            aws_access_key_id=tgt_aws_access_key_id,",
                                "            aws_secret_access_key=tgt_aws_secret_access_key) ",
                                "        #s3 = boto3.resource('s3')",
                                "",
                                "        tgt_s3_session=boto3.Session(aws_access_key_id=tgt_aws_access_key_id,aws_secret_access_key=tgt_aws_secret_access_key,region_name = self.v_tgt_region)",
                                "        #s3_session=boto3.Session(region_name = 'us-east-1')",
                                "",
                                "        #client = boto3.client('quicksight',region_name='us-east-1')",
                                "        self.tgt_client = boto3.client('quicksight',aws_access_key_id=tgt_aws_access_key_id,aws_secret_access_key=tgt_aws_secret_access_key,region_name=self.v_tgt_region)",
                                "        ",
                                "        ",
                                "    def is_data_source_exist(self):",
                                "        response = self.tgt_client.list_data_sources(",
                                "        AwsAccountId=self.v_tgt_account_id",
                                "        )",
                                "        is_exist = 0",
                                "        lst_data_source = []",
                                "        for item in response['DataSources']:",
                                "            lst_data_source.append({'Name' : item['Name'] , 'DataSourceId' : item['DataSourceId'], 'Type' : item['Type']})  ",
                                "",
                                "        newlist = [x for x in lst_data_source if self.v_tgt_data_source_id in x['DataSourceId']]",
                                "        if newlist:",
                                "            is_exist = 1",
                                "            print('Target data source details are :' , newlist)",
                                "        else:",
                                "            print('data source doen not exists in target account. Please make a data source before processing.')",
                                "            print('Please create a new data source or select from below list')",
                                "            for lst in lst_data_source:",
                                "                print(lst)        ",
                                "        return is_exist",
                                "",
                                "    def TEST(self):",
                                "        print('YES')",
                                "        ",
                                "    def get_source_analysis(self):    ",
                                "        '''",
                                "        Extract the source analysis properties based on the analysis id set in the variables",
                                "        '''",
                                "        analysisId=''",
                                "        analysisArn=''",
                                "        analysisName=''",
                                "        analyses = self.client.list_analyses(",
                                "            AwsAccountId=self.v_src_account_id,",
                                "            MaxResults=100",
                                "        )",
                                "        #print('analyses:', analyses)",
                                "        v_analysis = []",
                                "        y = [(member['Arn'],member['AnalysisId'],member['Name'], member['Status'],member['CreatedTime'],member['LastUpdatedTime']) for member in analyses['AnalysisSummaryList'] ]",
                                "        v_analysis.extend(y)",
                                "        while 'NextToken' in analyses:",
                                "                analyses = self.client.list_analyses(",
                                "                    AwsAccountId=self.v_src_account_id,",
                                "                    MaxResults=100,",
                                "                    NextToken=analyses['NextToken']",
                                "                    )",
                                "                y = [(member['Arn'],member['AnalysisId'],member['Name'] if ('Name' in member.keys()) else '', member['Status'],member['CreatedTime'],member['LastUpdatedTime']) for member in analyses['AnalysisSummaryList'] ]",
                                "                v_analysis.extend(y)",
                                "                #i+=len(analyses.get('AnalysisSummaryList'))",
                                "        #print('Number of Analyses: ' + str(i))",
                                "        for analysis in v_analysis:    ",
                                "            if analysis[1]==self.v_analysis_id and analysis[3].find('_SUCCESSFUL')!=-1 and analysis[3].find('DELETE')==-1:",
                                "                analysisId=analysis[1]",
                                "                analysisName=analysis[2]",
                                "                analysisArn=analysis[0]",
                                "                break",
                                "        dict_source_analysis = {'src_analysisId' : analysisId, 'src_analysis_arn' : analysisArn, 'src_analysis_name': analysisName}",
                                "        return dict_source_analysis",
                                "",
                                "    def get_tgt_analysis(self): ",
                                "        '''",
                                "        Get the target Analysis ID using analysis name",
                                "        '''",
                                "        analysisId=''",
                                "        analysisArn=''",
                                "        analysisName=''",
                                "",
                                "        analyses = self.tgt_client.list_analyses(",
                                "            AwsAccountId=self.v_tgt_account_id,",
                                "            MaxResults=100",
                                "        )",
                                "        #print(analyses)",
                                "        v_analysis = []",
                                "        y = [(member['Arn'],member['AnalysisId'],member['Name'], member['Status'],member['CreatedTime'],member['LastUpdatedTime']) for member in analyses['AnalysisSummaryList'] ]",
                                "        v_analysis.extend(y)",
                                "        while 'NextToken' in analyses:",
                                "                analyses = self.tgt_client.list_analyses(",
                                "                    AwsAccountId=self.v_tgt_account_id,",
                                "                    MaxResults=100,",
                                "                    NextToken=analyses['NextToken']",
                                "                    )",
                                "                y = [(member['Arn'],member['AnalysisId'],member['Name'] if ('Name' in member.keys()) else '', member['Status'],member['CreatedTime'],member['LastUpdatedTime']) for member in analyses['AnalysisSummaryList'] ]",
                                "                v_analysis.extend(y)",
                                "                #i+=len(analyses.get('AnalysisSummaryList'))",
                                "        #print('Number of Analyses: ' + str(i))",
                                "        for analysis in v_analysis:    ",
                                "            if analysis[1]==self.v_analysis_id and analysis[3].find('_SUCCESSFUL')!=-1 and analysis[3].find('DELETE')==-1:",
                                "                analysisId=analysis[1]",
                                "                analysisArn=analysis[0]",
                                "                analysisName=analysis[2]",
                                "                break",
                                "",
                                "        if analysisId:",
                                "            tgt_analysisId=analysisId",
                                "            tgt_analysis_arn=analysisArn",
                                "            tgt_analysis_name=analysisName",
                                "            dict_tgt_analysis = {'tgt_analysisId' : analysisId, 'tgt_analysis_arn' : analysisArn, 'tgt_analysis_name': analysisName}",
                                "            return dict_tgt_analysis",
                                "        else:",
                                "            dict_tgt_analysis = {}",
                                "            return dict_tgt_analysis",
                                "",
                                "    def create_template(self, dict_source_analysis):",
                                "        #Set the Template Name",
                                "        v_template_name=dict_source_analysis['src_analysisId'].replace(' ','')+'_MigrationTemplate'",
                                "        print(v_template_name)",
                                "        ###Get the description of analysis. This will tell us all the datasets that teh analysis use",
                                "        src_analysis_desc=self.client.describe_analysis(",
                                "            AwsAccountId=self.v_src_account_id,",
                                "            AnalysisId=dict_source_analysis['src_analysisId']",
                                "        )",
                                "        #Get the list of Datasets attached to the analysis",
                                "        #print('src_analysis_desc', src_analysis_desc)",
                                "",
                                "        ###Extract the dataset ARNs and Ids in 2 dictionaries.",
                                "        v_src_DatasetArn_Dict={}",
                                "        v_src_DatasetArn_Id={}",
                                "        v_src_DatasetName={}",
                                "",
                                "        datasets = self.client.list_data_sets(",
                                "            AwsAccountId=self.v_src_account_id,",
                                "            MaxResults=100",
                                "        )  ",
                                "",
                                "        v_datasets = []",
                                "        y = [(member['Arn'],member['DataSetId'],member['Name'], member['CreatedTime'],member['LastUpdatedTime']) for member in datasets['DataSetSummaries'] ]",
                                "        v_datasets.extend(y)",
                                "        while 'NextToken' in datasets:",
                                "                datasets = self.client.list_data_sets(",
                                "                    AwsAccountId=self.v_src_account_id,",
                                "                    MaxResults=100,",
                                "                    NextToken=datasets['NextToken']",
                                "                    )",
                                "                y = [(member['Arn'],member['DataSetId'],member['Name'] if ('Name' in member.keys()) else '', member['CreatedTime'],member['LastUpdatedTime']) for member in datasets['DataSetSummaries'] ]",
                                "                v_datasets.extend(y)",
                                "",
                                "",
                                "        for src_analysis_dataset in src_analysis_desc['Analysis']['DataSetArns']:",
                                "            for dataset in v_datasets:    ",
                                "                if dataset[0]==src_analysis_dataset:",
                                "                    v_src_DatasetArn_Dict[src_analysis_dataset]=dataset[0]",
                                "                    v_src_DatasetArn_Id[src_analysis_dataset]=dataset[1]",
                                "                    v_src_DatasetName[src_analysis_dataset]=dataset[2]",
                                "",
                                "        #print('v_src_DatasetArn_Dict',v_src_DatasetArn_Dict)",
                                "#         print('v_src_DatasetArn_Id', v_src_DatasetArn_Id)",
                                "#         print('v_src_DatasetName', v_src_DatasetName)",
                                "#         print('dict_source_analysis', dict_source_analysis)",
                                "",
                                "        #Generate the unique ARNs datasets and store in a list. These ARNs will then be used to create the template for the target",
                                "        src_dataset_ARN_list=[]",
                                "        n=0",
                                "        for item in v_src_DatasetArn_Dict:",
                                "            n=n+1",
                                "            ##dict(DataSetPlaceholder=v_analysis_name.replace(' ','')+'_MigrationTemplateARN'+str(n),DataSetArn=item)",
                                "            src_dataset_ARN_list.append(dict(DataSetPlaceholder=dict_source_analysis['src_analysisId'].replace(' ','')+'_MigrationTemplateARN'+str(n),DataSetArn=item))",
                                "        #print('src_dataset_ARN_list : \\n', src_dataset_ARN_list)",
                                "        ",
                                "",
                                "        Template_Name = src_dataset_ARN_list[0]['DataSetPlaceholder']",
                                "        print('Template_Name' , Template_Name)",
                                "",
                                "        #Create the Template",
                                "        #Check if the template already exists. If the template already exists, update it, else create it",
                                "",
                                "        templateArn=''",
                                "        templateId=''",
                                "        templateName=''",
                                "",
                                "        templates = self.client.list_templates(",
                                "            AwsAccountId=self.v_src_account_id,",
                                "            MaxResults=100",
                                "        )",
                                "",
                                "        #print(templates)",
                                "        v_templates = []",
                                "        y = [(member['Arn'],member['TemplateId'], member['LatestVersionNumber'],member['CreatedTime'],member['LastUpdatedTime']) for member in templates['TemplateSummaryList']]",
                                "        v_templates.extend(y)",
                                "        while 'NextToken' in templates:",
                                "                templates = self.client.list_templates(",
                                "                    AwsAccountId=self.v_src_account_id,",
                                "                    MaxResults=100,",
                                "                    NextToken=templates['NextToken']",
                                "                    )",
                                "                y = [(member['Arn'],member['TemplateId'] if ('Name' in member.keys()) else '', member['LatestVersionNumber'],member['CreatedTime'],member['LastUpdatedTime']) for member in templates['TemplateSummaryList'] ]",
                                "                v_templates.extend(y)",
                                "                #i+=len(templates.get('TemplateSummaryList'))",
                                "        #print('Number of Analyses: ' + str(i))",
                                "        for template in v_templates:    ",
                                "            if template[1]==v_template_name:",
                                "                templateArn=template[0]",
                                "                templateId=template[1]",
                                "                templateName=template[2]             ",
                                "                break",
                                "",
                                "        if templateArn:",
                                "            print('updating template')",
                                "            updateTemplate = self.client.update_template(",
                                "                AwsAccountId=self.v_src_account_id,",
                                "                TemplateId=v_template_name,",
                                "                SourceEntity={",
                                "                    'SourceAnalysis': {",
                                "                        'Arn': dict_source_analysis['src_analysis_arn'],",
                                "                        'DataSetReferences': src_dataset_ARN_list",
                                "                    }",
                                "                }",
                                "            )",
                                "        else:",
                                "            print('creating template')",
                                "            createTemplate=self.client.create_template(",
                                "                AwsAccountId=self.v_src_account_id,",
                                "                TemplateId=v_template_name,",
                                "                SourceEntity={",
                                "                    'SourceAnalysis': {",
                                "                        'Arn': dict_source_analysis['src_analysis_arn'],",
                                "                        'DataSetReferences': src_dataset_ARN_list",
                                "                    }",
                                "                }",
                                "            )",
                                "",
                                "        try:",
                                "            print('CreateTemplateARN: '+createTemplate['Arn'])",
                                "        except:",
                                "            print('UpdateTemplateARN: '+updateTemplate['Arn'])",
                                "",
                                "        #Template permissions should be updated on the source account template to provide access to the Target account",
                                "        #Use this to check if the template has been created successfully. If yes, then move to the next step of listing and updating permissions",
                                "        template_desc=self.client.describe_template(",
                                "            AwsAccountId=self.v_src_account_id,",
                                "            TemplateId=v_template_name,",
                                "            #VersionNumber=123,",
                                "            #AliasName='string'",
                                "        )",
                                "",
                                "        if template_desc['Template']['Version']['Status'].find('_SUCCESSFUL')==-1:",
                                "            time.sleep(120)",
                                "            template_desc=self.client.describe_template(",
                                "                AwsAccountId=self.v_src_account_id,",
                                "                TemplateId=v_template_name,",
                                "                #VersionNumber=123,",
                                "                #AliasName='string'",
                                "            )    ",
                                "            if template_desc['Template']['Version']['Status'].find('_SUCCESSFUL')==-1:",
                                "                print('Template could not be successfully created. Please check the configurations and re-execute the steps')",
                                "            else:",
                                "                print('Template was succefully created. Proceeding with the next step of updating permissions.')",
                                "                updateTemplate = self.client.update_template_permissions(",
                                "                    AwsAccountId=self.v_src_account_id,",
                                "                    TemplateId=v_template_name,",
                                "                    GrantPermissions=[",
                                "                        {",
                                "                            'Principal': 'arn:aws:iam::'+self.v_tgt_account_id+':root',",
                                "                            'Actions': ['quicksight:UpdateTemplatePermissions','quicksight:DescribeTemplate']",
                                "                        },",
                                "                    ]",
                                "                )",
                                "        else:",
                                "            updateTemplate = self.client.update_template_permissions(",
                                "            AwsAccountId=self.v_src_account_id,",
                                "            TemplateId=v_template_name,",
                                "            GrantPermissions=[",
                                "                {",
                                "                    'Principal': 'arn:aws:iam::'+self.v_tgt_account_id+':root',",
                                "                    'Actions': ['quicksight:UpdateTemplatePermissions','quicksight:DescribeTemplate']",
                                "                },",
                                "            ]",
                                "        )    ",
                                "",
                                "        #dict_keys(['Arn', 'Version', 'TemplateId', 'LastUpdatedTime', 'CreatedTime'])",
                                "",
                                "        ## Validate the response. Ensure that the template permissions have been updated in 'Permissions' node.",
                                "        print('update Template Permission' , updateTemplate['Permissions'])",
                                "",
                                "        return src_dataset_ARN_list, template_desc, v_src_DatasetArn_Id",
                                "    ",
                                "    def create_update_analysis(self, src_dataset_ARN_list, template_desc,dict_tgt_analysis,dict_source_analysis):",
                                "        print('dd')",
                                "        print('src_dataset_ARN_list', src_dataset_ARN_list)",
                                "        #Creaet or update analysis on target quick sight account",
                                "",
                                "        tgt_dataset_ARN_List=[]",
                                "        data_set_arns = []",
                                "        size = len(src_dataset_ARN_list)",
                                "        print('size:',size)",
                                "        for i in src_dataset_ARN_list:",
                                "            temp_tgt_dict=dict()",
                                "            temp_tgt_dict['DataSetPlaceholder']=i['DataSetPlaceholder']",
                                "            #print('check', temp_tgt_dict['DataSetPlaceholder'])",
                                "",
                                "            if self.v_target_dataset_id:",
                                "                if size == 1:",
                                "                    temp_tgt_dict['DataSetArn']='arn:aws:quicksight:'+ self.v_tgt_region +':' + self.v_tgt_account_id + ':dataset/' + self.v_target_dataset_id",
                                "            else:",
                                "                temp_tgt_dict['DataSetArn']=i['DataSetArn'].replace(self.v_src_account_id,self.v_tgt_account_id).replace(self.v_src_region,self.v_tgt_region) ",
                                "",
                                "            print('temp_tgt_dict',temp_tgt_dict)",
                                "            tgt_dataset_ARN_List.append(temp_tgt_dict)",
                                "",
                                "        print('tgt_dataset_ARN_List' , tgt_dataset_ARN_List)      ",
                                "",
                                "",
                                "",
                                "        if dict_tgt_analysis:",
                                "            print('Analysis exists in Target. Executing the steps for Update.')",
                                "            ###call update analysis function here. we can use the template for source to update the analysis with tgt_analysisId",
                                "            self.tgt_client.update_analysis(",
                                "                        AwsAccountId=self.v_tgt_account_id,",
                                "                        AnalysisId=dict_source_analysis['src_analysisId'],",
                                "                        Name=dict_tgt_analysis['tgt_analysis_name'],",
                                "                        SourceEntity={",
                                "                            'SourceTemplate': {",
                                "                                'DataSetReferences': tgt_dataset_ARN_List,",
                                "                                'Arn': template_desc['Template']['Arn']",
                                "                            }",
                                "                        }",
                                "                    )            ",
                                "        else:",
                                "            print('Analysis does not exist in Target. Executing the steps for Analysis creation.')",
                                "",
                                "            try:",
                                "                response = self.tgt_client.delete_analysis(",
                                "                    AwsAccountId = self.v_tgt_account_id,",
                                "                    AnalysisId = dict_source_analysis['src_analysisId'] ",
                                "                )",
                                "                print('corrupted analysis deleted successfully.')",
                                "            except:",
                                "                print('error while deleting corrupted analysis')",
                                "",
                                "",
                                "            ###call create analysis function here. we can potentially use the src_analysisId to store as the analysis ID during report creation",
                                "            self.tgt_client.create_analysis(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                AnalysisId=dict_source_analysis['src_analysisId'],",
                                "                Name=dict_source_analysis['src_analysis_name'],",
                                "                SourceEntity={",
                                "                    'SourceTemplate': {",
                                "                        'DataSetReferences': tgt_dataset_ARN_List,",
                                "                        'Arn': template_desc['Template']['Arn']",
                                "                    }",
                                "                }",
                                "            )    ",
                                "",
                                "        tgt_analysis_desc=self.tgt_client.describe_analysis(",
                                "            AwsAccountId=self.v_tgt_account_id,",
                                "            AnalysisId=dict_source_analysis['src_analysisId']",
                                "        )",
                                "",
                                "        if tgt_analysis_desc['Analysis']['Status'].find('_SUCCESSFUL')==-1:",
                                "            time.sleep(120)",
                                "            tgt_analysis_desc=self.tgt_client.describe_analysis(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                AnalysisId=dict_source_analysis['src_analysisId']",
                                "            )",
                                "            if tgt_analysis_desc['Analysis']['Status'].find('_SUCCESSFUL')==-1:",
                                "                print('Analysis could not be successfully created/updated. Please check the configurations and re-execute the steps')",
                                "                try:",
                                "                    print('Please correct below error to create analysis')",
                                "                    print(tgt_analysis_desc['Analysis']['Errors'])",
                                "                except:",
                                "                    print('No error')",
                                "            else:",
                                "                print('Analysis was succefully created/updated. Proceeding with the next step of updating permissions.')",
                                "                self.tgt_client.update_analysis_permissions(",
                                "                    AwsAccountId=self.v_tgt_account_id,",
                                "                    AnalysisId=dict_source_analysis['src_analysisId'],",
                                "                    GrantPermissions=[",
                                "                        {",
                                "                            'Principal': 'arn:aws:quicksight:' + self.v_role_region + ':' + self.v_tgt_account_id+':user/default/'+ self.v_role+'/'+ self.v_user,                   ",
                                "                            'Actions': ['quicksight:RestoreAnalysis', 'quicksight:UpdateAnalysisPermissions', 'quicksight:DeleteAnalysis', 'quicksight:QueryAnalysis', 'quicksight:DescribeAnalysisPermissions', 'quicksight:DescribeAnalysis', 'quicksight:UpdateAnalysis']",
                                "                        },",
                                "                    ]",
                                "                )",
                                "        else:",
                                "                print('Analysis was succefully created/updated. Proceeding with the next step of updating permissions.')",
                                "                self.tgt_client.update_analysis_permissions(",
                                "                    AwsAccountId=self.v_tgt_account_id,",
                                "                    AnalysisId=dict_source_analysis['src_analysisId'],",
                                "                    GrantPermissions=[",
                                "                        {",
                                "                            'Principal': 'arn:aws:quicksight:' + self.v_role_region + ':' + self.v_tgt_account_id+':user/default/'+ self.v_role+'/'+ self.v_user,",
                                "                            'Actions': ['quicksight:RestoreAnalysis', 'quicksight:UpdateAnalysisPermissions', 'quicksight:DeleteAnalysis', 'quicksight:QueryAnalysis', 'quicksight:DescribeAnalysisPermissions', 'quicksight:DescribeAnalysis', 'quicksight:UpdateAnalysis']",
                                "                        },",
                                "                    ]",
                                "                ) ",
                                "        print('Done: Analysis process has been complete')",
                                "        return tgt_dataset_ARN_List",
                                "",
                                "    def create_data_set_old(self, v_src_DatasetArn_Id):",
                                "",
                                "        dict_data_source = self.get_source_data_source(v_src_DatasetArn_Id)",
                                "        print(dict_data_source)",
                                "",
                                "        get_dsn_mapping_dict=dict()",
                                "",
                                "        # with open('data.json') as json_file:",
                                "        #     dsn_list=json.load(json_file)",
                                "",
                                "        dsn_list = {'dsn': [{'name': 'Athena','prod': dict_data_source['sourceDataSourceId'],'dev': self.v_tgt_data_source_id}]}",
                                "",
                                "        print('dsn_list', dsn_list)    ",
                                "        for i in dsn_list['dsn']:",
                                "            get_dsn_mapping_dict[i[self.v_src_env]]=i[self.v_target_env]",
                                "",
                                "        n=0    ",
                                "        for k in v_src_DatasetArn_Id:",
                                "",
                                "",
                                "            update_flag='N'",
                                "            ds=self.client.describe_data_set(",
                                "                    AwsAccountId=self.v_src_account_id,",
                                "                    DataSetId=v_src_DatasetArn_Id[k])",
                                "",
                                "            #print(ds)",
                                "",
                                "            item_list=[]",
                                "            for item in ds['DataSet']['PhysicalTableMap']:",
                                "                item_list.append(item)",
                                "",
                                "",
                                "",
                                "",
                                "            for i in item_list:",
                                "                for key in ds['DataSet']['PhysicalTableMap'][i]:",
                                "                    temp_string=ds['DataSet']['PhysicalTableMap'][i][key]['DataSourceArn'].replace(self.v_src_account_id,self.v_tgt_account_id).replace(self.v_src_region,self.v_tgt_region)",
                                "                    #ds['DataSet']['PhysicalTableMap'][i][key]['Schema'] = self.v_target_schema_name",
                                "                    replacement_dsn=get_dsn_mapping_dict[temp_string[temp_string.find('/')+1:]]",
                                "                    print('replacement_dsn', replacement_dsn)",
                                "                    if not replacement_dsn:",
                                "                        print('raise issue')",
                                "                    else:",
                                "                        temp_string=temp_string.replace(temp_string[temp_string.find('/')+1:],replacement_dsn)",
                                "                        temp_string = temp_string.replace(self.v_src_region,self.v_tgt_region)",
                                "                        print(self.v_src_region,self.v_tgt_region )",
                                "                        print('temp_string', temp_string)",
                                "                        ds['DataSet']['PhysicalTableMap'][i][key]['DataSourceArn']=temp_string",
                                "",
                                "",
                                "            datasets = self.tgt_client.list_data_sets(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                MaxResults=100",
                                "            )  ",
                                "",
                                "            v_datasets = []",
                                "            y = [(member['Arn'],member['DataSetId'],member['Name'], member['CreatedTime'],member['LastUpdatedTime']) for member in datasets['DataSetSummaries'] ]",
                                "            v_datasets.extend(y)",
                                "            while 'NextToken' in datasets:",
                                "                    datasets = self.tgt_client.list_data_sets(",
                                "                        AwsAccountId=self.v_tgt_account_id,",
                                "                        MaxResults=100,",
                                "                        NextToken=datasets['NextToken']",
                                "                        )",
                                "                    y = [(member['Arn'],member['DataSetId'],member['Name'] if ('Name' in member.keys()) else '', member['CreatedTime'],member['LastUpdatedTime']) for member in datasets['DataSetSummaries'] ]",
                                "                    v_datasets.extend(y)",
                                "            for dataset in v_datasets:    ",
                                "                if dataset[1]==ds['DataSet']['DataSetId']:",
                                "                    print('dataset already exists. updating the dataset instead of creating.')",
                                "                    ###run update here",
                                "                    update_flag='Y'",
                                "                    print('In Update')",
                                "                    try:",
                                "                        target_dataset = self.tgt_client.update_data_set(",
                                "                            AwsAccountId=self.v_tgt_account_id,",
                                "                            DataSetId=ds['DataSet']['DataSetId'],",
                                "                            Name=ds['DataSet']['Name'],",
                                "                            PhysicalTableMap=ds['DataSet']['PhysicalTableMap'],",
                                "                            LogicalTableMap=ds['DataSet']['LogicalTableMap'],",
                                "                            ImportMode=ds['DataSet']['ImportMode'])",
                                "                    except Exception as e:",
                                "                        print('*****ERROR ***********')",
                                "                        print(e)",
                                "                    break",
                                "",
                                "            #print(update_flag)    ",
                                "",
                                "            print('AwsAccountId', self.v_tgt_account_id)",
                                "            print('DataSetId', ds['DataSet']['DataSetId'])",
                                "            print('Name', ds['DataSet']['Name'])",
                                "            print('PhysicalTableMap', ds['DataSet']['PhysicalTableMap'])",
                                "            print('LogicalTableMap', ds['DataSet']['LogicalTableMap'])",
                                "            print('ImportMode', ds['DataSet']['ImportMode'])",
                                "            PhysicalTableMap = ds['DataSet']['PhysicalTableMap']",
                                "",
                                "            if update_flag=='N':",
                                "                print('dataset does not exists. creating the dataset')",
                                "                target_dataset = self.tgt_client.create_data_set(AwsAccountId=self.v_tgt_account_id, ",
                                "                                                            DataSetId=ds['DataSet']['DataSetId'],",
                                "                                                            Name=ds['DataSet']['Name'],",
                                "                                                            PhysicalTableMap=ds['DataSet']['PhysicalTableMap'],",
                                "                                                            LogicalTableMap=ds['DataSet']['LogicalTableMap'],",
                                "                                                            ImportMode=ds['DataSet']['ImportMode'])                           ",
                                "",
                                "",
                                "            self.tgt_client.update_data_set_permissions(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                DataSetId=ds['DataSet']['DataSetId'],",
                                "                GrantPermissions=[",
                                "                    {",
                                "                        'Principal': 'arn:aws:quicksight:ap-south-1:'+self.v_tgt_account_id+':user/default/'+ self.v_role+'/'+ self.v_user,",
                                "                        'Actions': [",
                                "                            'quicksight:UpdateDataSetPermissions','quicksight:DescribeDataSetPermissions','quicksight:PassDataSet','quicksight:CreateIngestion','quicksight:DescribeIngestion','quicksight:CancelIngestion','quicksight:ListIngestions','quicksight:UpdateDataSet','quicksight:DescribeDataSet','quicksight:DeleteDataSet'",
                                "                        ]",
                                "                    },",
                                "                ]",
                                "            )",
                                "",
                                "            print('Dataset create/update sucessfuly')",
                                "            return 1",
                                "        ",
                                "    def create_data_set(self, v_src_DatasetArn_Id):",
                                "        get_dsn_mapping_dict=dict()",
                                "",
                                "        #with open('data1.json') as json_file:",
                                "            #dsn_list=json.load(json_file)",
                                "            ",
                                "        dict_data_source = self.get_source_data_source(v_src_DatasetArn_Id)",
                                "        print(dict_data_source)        ",
                                "        ",
                                "        tg_id = self.v_tgt_data_source_id",
                                "        if tg_id == '':",
                                "            tg_id = dict_data_source['sourceDataSourceId']",
                                "            ",
                                "        print(f'we are processing target data source id {tg_id}')",
                                "        ",
                                "        dsn_list = {'dsn': [{'name': 'Athena','prod': dict_data_source['sourceDataSourceId'],'dev': tg_id}]}",
                                "",
                                "        for i in dsn_list['dsn']:",
                                "            get_dsn_mapping_dict[i[self.v_src_env]]=i[self.v_target_env]",
                                "",
                                "        n=0",
                                "        print('v_src_DatasetArn_Id',v_src_DatasetArn_Id)",
                                "        for k in v_src_DatasetArn_Id:",
                                "",
                                "",
                                "            update_flag='N'",
                                "            ds=self.client.describe_data_set(",
                                "                    AwsAccountId=self.v_src_account_id,",
                                "                    DataSetId=v_src_DatasetArn_Id[k])",
                                "",
                                "            #print(ds)",
                                "",
                                "            item_list=[]",
                                "            for item in ds['DataSet']['PhysicalTableMap']:",
                                "                item_list.append(item)",
                                "",
                                "            print('item_list',item_list)",
                                "",
                                "",
                                "            for i in item_list:",
                                "                for key in ds['DataSet']['PhysicalTableMap'][i]:",
                                "                    temp_string=ds['DataSet']['PhysicalTableMap'][i][key]['DataSourceArn'].replace(self.v_src_account_id,self.v_tgt_account_id).replace(self.v_src_region,self.v_tgt_region)",
                                "                    print('temp_string',temp_string)",
                                "                    replacement_dsn=get_dsn_mapping_dict[temp_string[temp_string.find('/')+1:]]",
                                "                    print('replacement_dsn',replacement_dsn)",
                                "                    if not replacement_dsn:",
                                "                        print('raise issue')",
                                "                    else:",
                                "                        temp_string=temp_string.replace(temp_string[temp_string.find('/')+1:],replacement_dsn)",
                                "                        print('New temp string', temp_string)",
                                "                        ds['DataSet']['PhysicalTableMap'][i][key]['DataSourceArn']=temp_string",
                                "",
                                "",
                                "            datasets = self.tgt_client.list_data_sets(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                MaxResults=100",
                                "            )  ",
                                "",
                                "            v_datasets = []",
                                "            y = [(member['Arn'],member['DataSetId'],member['Name'], member['CreatedTime'],member['LastUpdatedTime']) for member in datasets['DataSetSummaries'] ]",
                                "            v_datasets.extend(y)",
                                "            while 'NextToken' in datasets:",
                                "                    datasets = self.tgt_client.list_data_sets(",
                                "                        AwsAccountId=self.v_tgt_account_id,",
                                "                        MaxResults=100,",
                                "                        NextToken=datasets['NextToken']",
                                "                        )",
                                "                    y = [(member['Arn'],member['DataSetId'],member['Name'] if ('Name' in member.keys()) else '', member['CreatedTime'],member['LastUpdatedTime']) for member in datasets['DataSetSummaries'] ]",
                                "                    v_datasets.extend(y)",
                                "            for dataset in v_datasets:    ",
                                "                if dataset[1]==ds['DataSet']['DataSetId']:",
                                "                    print('dataset already exists. updating the dataset instead of creating.')",
                                "                    ###run update here",
                                "                    update_flag='Y'",
                                "                    print('In Update')",
                                "                    target_dataset = self.tgt_client.update_data_set(",
                                "                        AwsAccountId=self.v_tgt_account_id,",
                                "                        DataSetId=ds['DataSet']['DataSetId'],",
                                "                        Name=ds['DataSet']['Name'],",
                                "                        PhysicalTableMap=ds['DataSet']['PhysicalTableMap'],",
                                "                        LogicalTableMap=ds['DataSet']['LogicalTableMap'],",
                                "                        ImportMode=ds['DataSet']['ImportMode'])",
                                "                    print('Dataset update sucessfully')",
                                "                    break",
                                "",
                                "            #print(update_flag)",
                                "",
                                "            print('AwsAccountId', self.v_tgt_account_id)",
                                "            print('DataSetId', ds['DataSet']['DataSetId'])",
                                "            print('Name', ds['DataSet']['Name'])",
                                "            print('PhysicalTableMap', ds['DataSet']['PhysicalTableMap'])",
                                "            print('LogicalTableMap', ds['DataSet']['LogicalTableMap'])",
                                "            print('ImportMode', ds['DataSet']['ImportMode'])",
                                "",
                                "            if update_flag=='N':",
                                "                print('dataset does not exists. creating the dataset')",
                                "                target_dataset = self.tgt_client.create_data_set(AwsAccountId=self.v_tgt_account_id, ",
                                "                                                            DataSetId=ds['DataSet']['DataSetId'],",
                                "                                                            Name=ds['DataSet']['Name'],",
                                "                                                            PhysicalTableMap=ds['DataSet']['PhysicalTableMap'],",
                                "                                                            LogicalTableMap=ds['DataSet']['LogicalTableMap'],",
                                "                                                            ImportMode=ds['DataSet']['ImportMode'])",
                                "                print('Dataset created sucessfully')",
                                "",
                                "",
                                "            self.tgt_client.update_data_set_permissions(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                DataSetId=ds['DataSet']['DataSetId'],",
                                "                GrantPermissions=[",
                                "                    {",
                                "                        'Principal': 'arn:aws:quicksight:ap-south-1:'+self.v_tgt_account_id+':user/default/'+self.v_role+'/'+self.v_user,",
                                "                        'Actions': [",
                                "                            'quicksight:UpdateDataSetPermissions','quicksight:DescribeDataSetPermissions','quicksight:PassDataSet','quicksight:CreateIngestion','quicksight:DescribeIngestion','quicksight:CancelIngestion','quicksight:ListIngestions','quicksight:UpdateDataSet','quicksight:DescribeDataSet','quicksight:DeleteDataSet'",
                                "                        ]",
                                "                    },",
                                "                ]",
                                "            )",
                                "",
                                "",
                                "    def create_update_analysis_old(self, src_dataset_ARN_list, template_desc,dict_tgt_analysis,dict_source_analysis):    ",
                                "        #Creaet or update analysis on target quick sight account",
                                "        temp_tgt_dict=dict()",
                                "        tgt_dataset_ARN_List=[]",
                                "        for i in src_dataset_ARN_list:",
                                "            temp_tgt_dict['DataSetPlaceholder']=i['DataSetPlaceholder']",
                                "            if self.v_target_dataset_id:",
                                "                temp_tgt_dict['DataSetArn']='arn:aws:quicksight:'+ self.v_tgt_region +':' + self.v_tgt_account_id + ':dataset/' + self.v_target_dataset_id",
                                "            else:",
                                "                temp_tgt_dict['DataSetArn']=i['DataSetArn'].replace(self.v_src_account_id,self.v_tgt_account_id).replace(self.v_src_region,self.v_tgt_region) ",
                                "",
                                "            tgt_dataset_ARN_List.append(temp_tgt_dict)",
                                "",
                                "        print('tgt_dataset_ARN_List' , tgt_dataset_ARN_List)",
                                "",
                                "",
                                "        if dict_tgt_analysis:",
                                "            print('Analysis exists in Target. Executing the steps for Update.')",
                                "            ###call update analysis function here. we can use the template for source to update the analysis with tgt_analysisId",
                                "            self.tgt_client.update_analysis(",
                                "                        AwsAccountId=self.v_tgt_account_id,",
                                "                        AnalysisId=dict_source_analysis['src_analysisId'],",
                                "                        Name=dict_tgt_analysis['tgt_analysis_name'],",
                                "                        SourceEntity={",
                                "                            'SourceTemplate': {",
                                "                                'DataSetReferences': tgt_dataset_ARN_List,",
                                "                                'Arn': template_desc['Template']['Arn']",
                                "                            }",
                                "                        }",
                                "                    )            ",
                                "        else:",
                                "            print('Analysis does not exist in Target. Executing the steps for Analysis creation.')",
                                "            ",
                                "            try:",
                                "                response = self.tgt_client.delete_analysis(",
                                "                    AwsAccountId = self.v_tgt_account_id,",
                                "                    AnalysisId = dict_source_analysis['src_analysisId'] ",
                                "                )",
                                "                print('corrupted analysis deleted successfully.')",
                                "            except:",
                                "                print('error while deleting corrupted analysis')",
                                "                ",
                                "            ",
                                "            ###call create analysis function here. we can potentially use the src_analysisId to store as the analysis ID during report creation",
                                "            self.tgt_client.create_analysis(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                AnalysisId=dict_source_analysis['src_analysisId'],",
                                "                Name=dict_source_analysis['src_analysis_name'],",
                                "                SourceEntity={",
                                "                    'SourceTemplate': {",
                                "                        'DataSetReferences': tgt_dataset_ARN_List,",
                                "                        'Arn': template_desc['Template']['Arn']",
                                "                    }",
                                "                }",
                                "            )    ",
                                "",
                                "        tgt_analysis_desc=self.tgt_client.describe_analysis(",
                                "            AwsAccountId=self.v_tgt_account_id,",
                                "            AnalysisId=dict_source_analysis['src_analysisId']",
                                "        )",
                                "",
                                "        if tgt_analysis_desc['Analysis']['Status'].find('_SUCCESSFUL')==-1:",
                                "            time.sleep(120)",
                                "            tgt_analysis_desc=self.tgt_client.describe_analysis(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                AnalysisId=dict_source_analysis['src_analysisId']",
                                "            )",
                                "            if tgt_analysis_desc['Analysis']['Status'].find('_SUCCESSFUL')==-1:",
                                "                print('Analysis could not be successfully created/updated. Please check the configurations and re-execute the steps')",
                                "                try:",
                                "                    print('Please correct below error to create analysis')",
                                "                    print(tgt_analysis_desc['Analysis']['Errors'])",
                                "                except:",
                                "                    print('No error')",
                                "            else:",
                                "                print('Analysis was succefully created/updated. Proceeding with the next step of updating permissions.')",
                                "                self.tgt_client.update_analysis_permissions(",
                                "                    AwsAccountId=self.v_tgt_account_id,",
                                "                    AnalysisId=dict_source_analysis['src_analysisId'],",
                                "                    GrantPermissions=[",
                                "                        {",
                                "                            'Principal': 'arn:aws:quicksight:' + self.v_role_region + ':' + self.v_tgt_account_id+':user/default/'+ self.v_role+'/'+ self.v_user,                   ",
                                "                            'Actions': ['quicksight:RestoreAnalysis', 'quicksight:UpdateAnalysisPermissions', 'quicksight:DeleteAnalysis', 'quicksight:QueryAnalysis', 'quicksight:DescribeAnalysisPermissions', 'quicksight:DescribeAnalysis', 'quicksight:UpdateAnalysis']",
                                "                        },",
                                "                    ]",
                                "                )",
                                "        else:",
                                "                print('Analysis was succefully created/updated. Proceeding with the next step of updating permissions.')",
                                "                self.tgt_client.update_analysis_permissions(",
                                "                    AwsAccountId=self.v_tgt_account_id,",
                                "                    AnalysisId=dict_source_analysis['src_analysisId'],",
                                "                    GrantPermissions=[",
                                "                        {",
                                "                            'Principal': 'arn:aws:quicksight:' + self.v_role_region + ':' + self.v_tgt_account_id+':user/default/'+ self.v_role+'/'+ self.v_user,",
                                "                            'Actions': ['quicksight:RestoreAnalysis', 'quicksight:UpdateAnalysisPermissions', 'quicksight:DeleteAnalysis', 'quicksight:QueryAnalysis', 'quicksight:DescribeAnalysisPermissions', 'quicksight:DescribeAnalysis', 'quicksight:UpdateAnalysis']",
                                "                        },",
                                "                    ]",
                                "                ) ",
                                "        print('Done: Analysis process has been complete')",
                                "        return tgt_dataset_ARN_List",
                                "",
                                "    def get_source_data_source(self, v_src_DatasetArn_Id):",
                                "        dict_data_source = {}",
                                "        for key in v_src_DatasetArn_Id:",
                                "",
                                "            dict_physical_table_map=self.client.describe_data_set(",
                                "                AwsAccountId=self.v_src_account_id,",
                                "                DataSetId=v_src_DatasetArn_Id[key])['DataSet']['PhysicalTableMap']",
                                "",
                                "            distinct_dsn = set()",
                                "            for i in dict_physical_table_map.keys():",
                                "                for j in dict_physical_table_map[i].keys():",
                                "                    for k in dict_physical_table_map[i][j].keys():",
                                "                        if k=='DataSourceArn':",
                                "                            distinct_dsn.add(dict_physical_table_map[i][j]['DataSourceArn'])",
                                "",
                                "",
                                "            distinct_source_dsn_set=set()",
                                "            distinct_source_dsnid_set=set()",
                                "            distinct_target_dsn_set=set()",
                                "",
                                "",
                                "            for dsn in distinct_dsn:",
                                "",
                                "                datasources = self.client.list_data_sources(",
                                "                    AwsAccountId=self.v_src_account_id, ##Replace this with Target Account",
                                "                    MaxResults=100",
                                "                )",
                                "",
                                "                v_datasources = []",
                                "                y = [(member['Arn'],member['DataSourceId'],member['Name'], member['CreatedTime'],member['LastUpdatedTime'],member['Type']) for member in datasources['DataSources'] ]",
                                "                v_datasources.extend(y)",
                                "                while 'NextToken' in datasources:",
                                "                        datasources = self.client.list_data_sources(",
                                "                            AwsAccountId=self.v_src_account_id,",
                                "                            MaxResults=100,",
                                "                            NextToken=datasources['NextToken']",
                                "                            )",
                                "                        y = [(member['Arn'],member['DataSourceId'],member['Name'] if ('Name' in member.keys()) else '',member['CreatedTime'],member['LastUpdatedTime']) for member in datasources['DataSources'] ]",
                                "                        v_datasources.extend(y)",
                                "                        #i+=len(templates.get('TemplateSummaryList'))",
                                "                #print('Number of Analyses: ' + str(i))",
                                "                for datasource in v_datasources:    ",
                                "                    '''",
                                "                    if datasource[2]=='Athena' :",
                                "                        sourceDataSourceARN=datasource[0]",
                                "                        sourceDataSourceId=datasource[1]",
                                "                    '''",
                                "                    if datasource[0]==dsn:",
                                "                        sourceDataSourceARN=datasource[0]",
                                "                        sourceDataSourceId=datasource[1]",
                                "                        sourceDataSourceName=datasource[2]",
                                "                        distinct_source_dsn_set.add(sourceDataSourceId)",
                                "                        dict_data_source = {'sourceDataSourceARN' : sourceDataSourceARN, 'sourceDataSourceId' : sourceDataSourceId, 'sourceDataSourceName': sourceDataSourceName}",
                                "                        return dict_data_source",
                                "",
                                "    #Gather the dashboard details from Source",
                                "    def get_source_dashboard(self):",
                                "        src_dashboardId=''",
                                "        src_dashboardArn=''",
                                "        src_dashboardName=''",
                                "",
                                "        dashboards = self.client.list_dashboards(",
                                "            AwsAccountId=self.v_src_account_id,",
                                "            MaxResults=100",
                                "        )    ",
                                "",
                                "        v_dashboard = []",
                                "        y = [(member['Arn'],member['DashboardId'],member['Name'], member['PublishedVersionNumber'],member['CreatedTime'],member['LastUpdatedTime']) for member in dashboards['DashboardSummaryList'] ]",
                                "        v_dashboard.extend(y)",
                                "        while 'NextToken' in dashboards:",
                                "                dashboards = self.client.list_dashboards(",
                                "                    AwsAccountId=self.v_src_account_id,",
                                "                    MaxResults=100,",
                                "                    NextToken=analyses['NextToken']",
                                "                    )",
                                "                y = [(member['Arn'],member['DashboardId'],member['Name'] if ('Name' in member.keys()) else '', member['PublishedVersionNumber'],member['CreatedTime'],member['LastUpdatedTime']) for member in dashboards['DashboardSummaryList'] ]",
                                "                v_dashboard.extend(y)",
                                "                #i+=len(dashboards.get('DashboardSummaryList'))",
                                "        #print('Number of Analyses: ' + str(i))",
                                "        for dashboard in v_dashboard:    ",
                                "            if dashboard[1]==self.v_dashboard_id:",
                                "                src_dashboardId=dashboard[1]",
                                "                src_dashboardArn=dashboard[0]",
                                "                src_dashboardName=dashboard[2]",
                                "                break",
                                "        return src_dashboardId,src_dashboardArn,src_dashboardName",
                                "",
                                "    #Gather the dashboard details from Target",
                                "    def get_tgt_dashboard(self):",
                                "        tgt_dashboardId=''",
                                "        tgt_dashboardArn=''",
                                "        tgt_dashboardName=''",
                                "",
                                "        tgt_dashboards = self.tgt_client.list_dashboards(",
                                "            AwsAccountId=self.v_tgt_account_id,",
                                "            MaxResults=100",
                                "        )    ",
                                "",
                                "        v_dashboard = []",
                                "        y = [(member['Arn'],member['DashboardId'],member['Name'], member['PublishedVersionNumber'],member['CreatedTime'],member['LastUpdatedTime']) for member in tgt_dashboards['DashboardSummaryList'] ]",
                                "        v_dashboard.extend(y)",
                                "        while 'NextToken' in tgt_dashboards:",
                                "                tgt_dashboards = self.tgt_client.list_dashboards(",
                                "                    AwsAccountId=self.v_tgt_account_id,",
                                "                    MaxResults=100,",
                                "                    NextToken=analyses['NextToken']",
                                "                    )",
                                "                y = [(member['Arn'],member['DashboardId'],member['Name'] if ('Name' in member.keys()) else '', member['PublishedVersionNumber'],member['CreatedTime'],member['LastUpdatedTime']) for member in tgt_dashboards['DashboardSummaryList'] ]",
                                "                v_dashboard.extend(y)",
                                "                #i+=len(dashboards.get('DashboardSummaryList'))",
                                "        #print('Number of Analyses: ' + str(i))",
                                "        for dashboard in v_dashboard:    ",
                                "            if dashboard[1]==self.v_dashboard_id:",
                                "                tgt_dashboardId=dashboard[1]",
                                "                tgt_dashboardArn=dashboard[0]",
                                "                tgt_dashboardName=dashboard[2]",
                                "                break",
                                "        return tgt_dashboardId,tgt_dashboardArn,tgt_dashboardName",
                                "",
                                "    #Create or Update Dashboard",
                                "    #The Dashboard requires Source Entity, which is obtained by modifying the definition of the dataset ARN in the src_dataset_ARN_list and storing it in the tgt_dataset_ARN_list.",
                                "    #Check if the Dashboard already exists in the target account. If it does, update it, else create it. Use the template ARN for the source template, for which we modified the permissions in the Template step.",
                                "    #Update the permissions on the Dashboard, so it can be accessed from Quicksight.",
                                "    def create_update_dashboard(self, tgt_dataset_ARN_List, template_desc):",
                                "",
                                "        src_dashboardId,src_dashboardArn,src_dashboardName = self.get_source_dashboard()",
                                "        tgt_dashboardId,tgt_dashboardArn,tgt_dashboardName = self.get_tgt_dashboard()",
                                "        print('src_dashboardId: '+src_dashboardId)",
                                "        print('tgt_dashboardId: '+tgt_dashboardId)",
                                "        print('DataSetReferences: '+ str(tgt_dataset_ARN_List))",
                                "        print('AwsAccountId: '+ self.v_tgt_account_id)",
                                "        print('DashboardId: '+ src_dashboardId)",
                                "        print('Name: '+ src_dashboardName)",
                                "        print('DataSetReferences: '+ str(tgt_dataset_ARN_List))",
                                "        print('Arn: '+ template_desc['Template']['Arn'])",
                                "",
                                "        #target_dataset_id = '597f14dd-1ec2-4e67-ba99-9a58e3fdd3b1'",
                                "",
                                "        #tgt_dataset_ARN_List_Created_Manually = [{'DataSetPlaceholder': 'fd88deb6-a768-4f6a-aee8-5a0331f33686_MigrationTemplateARN1', 'DataSetArn': 'arn:aws:quicksight:us-east-1:165155866410:dataset/' + target_dataset_id}]",
                                "",
                                "        if tgt_dashboardId:",
                                "",
                                "            print('Dashboard exists in Target. Executing the steps for Update.')",
                                "            ###call update analysis function here. we can use the template for source to update the analysis with tgt_analysisId",
                                "            dashboard_response_update=self.tgt_client.update_dashboard(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                DashboardId=tgt_dashboardId,",
                                "                Name=tgt_dashboardName,",
                                "                SourceEntity={",
                                "                    'SourceTemplate': {",
                                "                            'DataSetReferences': tgt_dataset_ARN_List,",
                                "                            'Arn': template_desc['Template']['Arn']",
                                "                        }",
                                "                }",
                                "            )",
                                "            time.sleep(120)",
                                "        else:",
                                "            print('Dashboard does not exist in Target. Executing the steps for Dashboard creation.')",
                                "            ###call create analysis function here. we can potentially use the src_analysisId to store as the analysis ID during report creation",
                                "            dashboard_response_create=self.tgt_client.create_dashboard(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                DashboardId=src_dashboardId,",
                                "                Name=src_dashboardName,",
                                "                Permissions=[",
                                "                    {",
                                "                        'Principal': 'arn:aws:quicksight:ap-south-1:'+self.v_tgt_account_id+':user/default/'+self.v_role+'/'+self.v_user,",
                                "                        'Actions': ['quicksight:DescribeDashboard','quicksight:ListDashboardVersions','quicksight:UpdateDashboardPermissions','quicksight:QueryDashboard','quicksight:UpdateDashboard','quicksight:DeleteDashboard','quicksight:DescribeDashboardPermissions','quicksight:UpdateDashboardPublishedVersion']",
                                "                    },",
                                "                ],",
                                "                SourceEntity={",
                                "                            'SourceTemplate': {",
                                "                                'DataSetReferences': tgt_dataset_ARN_List,",
                                "                                'Arn': template_desc['Template']['Arn']",
                                "                            }",
                                "                        },",
                                "                DashboardPublishOptions={",
                                "                    'AdHocFilteringOption': {",
                                "                        'AvailabilityStatus': 'DISABLED'",
                                "                    },",
                                "                    'ExportToCSVOption': {",
                                "                        'AvailabilityStatus': 'ENABLED'",
                                "                    },",
                                "                    'SheetControlsOption': {",
                                "                        'VisibilityState': 'COLLAPSED'",
                                "                    }",
                                "                }",
                                "            )",
                                "            time.sleep(120)",
                                "",
                                "        try:",
                                "            published_version_number=int(dashboard_response_create['VersionArn'].replace(dashboard_response_create['Arn']+'/version/',''))",
                                "        except:",
                                "            published_version_number=int(dashboard_response_update['VersionArn'].replace(dashboard_response_update['Arn']+'/version/',''))",
                                "",
                                "        tgt_dashboard_desc=self.tgt_client.describe_dashboard(",
                                "            AwsAccountId=self.v_tgt_account_id,",
                                "            DashboardId=src_dashboardId",
                                "        )",
                                "        try:",
                                "            if tgt_dashboard_desc['Dashboard']['Version']['Status'].find('_SUCCESSFUL')==-1:",
                                "                time.sleep(120)",
                                "                tgt_dashboard_desc=tgt_dashboard_desc=self.tgt_client.describe_dashboard(AwsAccountId=self.v_tgt_account_id,DashboardId=src_dashboardId)",
                                "                if tgt_dashboard_desc['Dashboard']['Status'].find('_SUCCESSFUL')==-1:",
                                "                    print('Dashboard could not be successfully created/updated. Please check the configurations and re-execute the steps')",
                                "                else:",
                                "                    print('Dashboard was succefully created/updated. Proceeding with the next step of updating permissions.')",
                                "                    self.tgt_client.update_dashboard_permissions(",
                                "                        AwsAccountId=self.v_tgt_account_id,",
                                "                        DashboardId=src_dashboardId,",
                                "                        GrantPermissions=[",
                                "                            {",
                                "                                'Principal': 'arn:aws:quicksight:ap-south-1:'+self.v_tgt_account_id+':user/default/'+ self.v_role+'/'+ self.v_user,",
                                "                                'Actions': ['quicksight:DescribeDashboard','quicksight:ListDashboardVersions','quicksight:UpdateDashboardPermissions','quicksight:QueryDashboard','quicksight:UpdateDashboard','quicksight:DeleteDashboard','quicksight:DescribeDashboardPermissions','quicksight:UpdateDashboardPublishedVersion']",
                                "                            },",
                                "                        ]",
                                "                    )",
                                "                    print('permissions successfully updated. Punblishing the latest version of the dashboard now')",
                                "                    self.tgt_client.update_dashboard_published_version(",
                                "                        AwsAccountId=self.v_tgt_account_id,",
                                "                        DashboardId=src_dashboardId,",
                                "                        VersionNumber=tgt_dashboard_desc['Dashboard']['Version']['VersionNumber']",
                                "                    )",
                                "        except:",
                                "            print('some issue while creating Dashboard')",
                                "            ",
                                "        else:",
                                "            try:",
                                "                print('Dashboard was succefully created/updated. Proceeding with the next step of updating permissions.')",
                                "                self.tgt_client.update_dashboard_permissions(",
                                "                    AwsAccountId=self.v_tgt_account_id,",
                                "                    DashboardId=src_dashboardId,",
                                "                    GrantPermissions=[",
                                "                        {",
                                "                            'Principal': 'arn:aws:quicksight:ap-south-1:'+self.v_tgt_account_id+':user/default/'+ self.v_role+'/'+ self.v_user,",
                                "                            'Actions': ['quicksight:DescribeDashboard','quicksight:ListDashboardVersions','quicksight:UpdateDashboardPermissions','quicksight:QueryDashboard','quicksight:UpdateDashboard','quicksight:DeleteDashboard','quicksight:DescribeDashboardPermissions','quicksight:UpdateDashboardPublishedVersion']",
                                "                        },",
                                "                    ]",
                                "                )",
                                "                print('permissions successfully updated. Publishing the latest version of the dashboard now')",
                                "                self.tgt_client.update_dashboard_published_version(",
                                "                    AwsAccountId=self.v_tgt_account_id,",
                                "                    DashboardId=src_dashboardId,",
                                "                    VersionNumber=published_version_number",
                                "                )",
                                "            except:",
                                "                print('some issue while while updating Dashboard')",
                                "                ",
                                "        try:        ",
                                "            tgt_dashboard_desc=self.tgt_client.describe_dashboard(",
                                "                AwsAccountId=self.v_tgt_account_id,",
                                "                DashboardId=src_dashboardId",
                                "            )",
                                "            print('Below is the output of dashbaord', tgt_dashboard_desc)",
                                "        except:",
                                "            print('some issue while getting Dashboard information')",
                                "        return tgt_dashboardId",
                                "",
                                "",
                                "def dashboard_migration(config):",
                                "    # s3_boto = boto3.client('s3')",
                                "    # bucket_name = args['bucket_name']",
                                "    # configuration_file_name = args['configuration_file_name']",
                                "    # obj_accounts = s3_boto.get_object(Bucket=bucket_name, Key=configuration_file_name)",
                                "    # config = ConfigParser()",
                                "    # config.read_string(obj_accounts['Body'].read().decode())",
                                "    # Assign Account Properties",
                                "    print('start execution!')",
                                "        ",
                                "    v_migrate_dataset=int(config['variable']['v_migrate_dataset'])",
                                "    v_target_dataset_id = config['variable']['v_target_dataset_id']",
                                "    v_migrate_analysis=int(config['variable']['v_migrate_analysis'])        ",
                                "    v_migrate_dashboard=int(config['variable']['v_migrate_dashboard'])",
                                "    ",
                                "    obj = QuickSightMigration(config)",
                                "    ",
                                "    is_data_source = obj.is_data_source_exist()",
                                "    ",
                                "    if is_data_source > 0:",
                                "    ",
                                "        dict_source_analysis = obj.get_source_analysis() ",
                                "        if dict_source_analysis:",
                                "            print('Below are the analysis details of source quick sight account')",
                                "            print('src_analysis_id is: {id}\\nsrc_analysis_arn is: {arn}\\nsrc_analysis_name is: {name}'.format(id = dict_source_analysis['src_analysisId'],arn=dict_source_analysis['src_analysis_arn'],name=dict_source_analysis['src_analysis_name']))",
                                "        else:",
                                "            print('analysis is not present in source quick sight account')",
                                "        ",
                                "        dict_tgt_analysis = obj.get_tgt_analysis()",
                                "        if dict_tgt_analysis:",
                                "            print('Below are the analysis details of target quick sight account')",
                                "            print('tgt_analysisId is: {id}\\ntgt_analysis_arn is: {arn}\\ntgt_analysis_name is: {name}'.format(id = dict_tgt_analysis['tgt_analysisId'],arn=dict_tgt_analysis['tgt_analysis_arn'],name=dict_tgt_analysis['tgt_analysis_name']))",
                                "        else:",
                                "            print('analysis is not present in target quick sight account')   ",
                                "        ",
                                "        if dict_source_analysis:",
                                "            src_dataset_ARN_list, template_desc,v_src_DatasetArn_Id = obj.create_template(dict_source_analysis)",
                                "        ",
                                "            if v_migrate_dataset > 0 and v_target_dataset_id == '':",
                                "                #add dataset logic ",
                                "                result = obj.create_data_set(v_src_DatasetArn_Id)",
                                "                print(result)",
                                "            else:",
                                "                print('dataset already created in target manually')  ",
                                "        ",
                                "            #The analysis requires Source Entity, which is obtained by modifying the definition of the dataset ARN in the src_dataset_ARN_list and storing it in the tgt_dataset_ARN_list.",
                                "            #Check if the analysis already exists in the target account. If it does, update it, else create it. Use the template ARN for the source template, for which we modified teh permissions in the Template step.",
                                "            #Update the permissions on the analysis, so it can be accessed from Quicksight.   ",
                                "            if v_migrate_analysis > 0:",
                                "                tgt_dataset_ARN_List = obj.create_update_analysis(src_dataset_ARN_list,template_desc,dict_tgt_analysis,dict_source_analysis)",
                                "                if tgt_dataset_ARN_List:",
                                "                    print('analyssis process complete')",
                                "        ",
                                "            #Create or Update Dashboard",
                                "            #The Dashboard requires Source Entity, which is obtained by modifying the definition of the dataset ARN in the src_dataset_ARN_list and storing it in the tgt_dataset_ARN_list.",
                                "            #Check if the Dashboard already exists in the target account. If it does, update it, else create it. Use the template ARN for the source template, for which we modified the permissions in the Template step.",
                                "            #Update the permissions on the Dashboard, so it can be accessed from Quicksight.",
                                "            if v_migrate_dashboard > 0:",
                                "                result = obj.create_update_dashboard(tgt_dataset_ARN_List, template_desc)",
                                "                if result:",
                                "                    print('Dashboard process complete')",
                                "    else:",
                                "        raise Exception('Please create data source before proceeding')",
                                "",
                                "",
                                "athena_query_names = [",
                                "    'summary_create_view_query','drop_monthly_shared_service_query','create_monthly_shared_service_query',",
                                "    'drop_product_code_cost_query','create_product_code_cost_query','drop_shared_cost_agg_query',",
                                "    'create_shared_cost_agg_query'",
                                "]",
                                "",
                                "summary_view_query = '''",
                                "CREATE OR REPLACE VIEW summary_view AS",
                                "(",
                                "    SELECT",
                                "    year",
                                "    , month",
                                "    , bill_billing_period_start_date as billing_period",
                                "    , (CASE WHEN (date_trunc('month', line_item_usage_start_date) >= (date_trunc('month', current_timestamp) - INTERVAL  '3' MONTH)) THEN date_trunc('day', line_item_usage_start_date) ELSE date_trunc('month', line_item_usage_start_date) END) as usage_date",
                                "    , bill_payer_account_id as payer_account_id",
                                "    , line_item_usage_account_id as linked_account_id",
                                "    , bill_invoice_id as invoice_id",
                                "    , line_item_line_item_type as charge_type",
                                "    , (CASE WHEN (line_item_line_item_type = 'DiscountedUsage') THEN 'Running_Usage' WHEN (line_item_line_item_type = 'SavingsPlanCoveredUsage') THEN 'Running_Usage' WHEN (line_item_line_item_type = 'Usage') THEN 'Running_Usage' ELSE 'non_usage' END) as charge_category",
                                "    , (CASE WHEN (savings_plan_savings_plan_a_r_n <> '') THEN 'SavingsPlan' WHEN (reservation_reservation_a_r_n <> '') THEN 'Reserved' WHEN (line_item_usage_type LIKE '%Spot%') THEN 'Spot' ELSE 'OnDemand' END) as purchase_option",
                                "    , (CASE WHEN (savings_plan_savings_plan_a_r_n <> '') THEN savings_plan_savings_plan_a_r_n WHEN (reservation_reservation_a_r_n <> '') THEN reservation_reservation_a_r_n ELSE '' END) as ri_sp_arn",
                                "    , line_item_product_code as product_code",
                                "    , product_product_name as product_name",
                                "    , {tag_value} as Tags",
                                "    , (CASE WHEN ((bill_billing_entity = 'AWS Marketplace') AND (NOT (line_item_line_item_type LIKE '%Discount%'))) THEN Product_Product_Name WHEN (product_servicecode = '') THEN line_item_product_code ELSE product_servicecode END) as service",
                                "    , product_product_family as product_family",
                                "    , line_item_usage_type as usage_type",
                                "    , line_item_operation as operation",
                                "    , line_item_line_item_description as item_description",
                                "    , line_item_availability_zone as availability_zone",
                                "    , product_region as region",
                                "    , (CASE WHEN ((line_item_usage_type LIKE '%Spot%') AND (line_item_product_code = 'AmazonEC2') AND (line_item_line_item_type = 'Usage')) THEN split_part(line_item_line_item_description, '.', 1) ELSE product_instance_type_family END) as instance_type_family",
                                "    , (CASE WHEN ((line_item_usage_type LIKE '%Spot%') AND (line_item_product_code = 'AmazonEC2') AND (line_item_line_item_type = 'Usage')) THEN split_part(line_item_line_item_description, ' ', 1) ELSE product_instance_type END) as instance_type",
                                "    , (CASE WHEN ((line_item_usage_type LIKE '%Spot%') AND (line_item_product_code = 'AmazonEC2') AND (line_item_line_item_type = 'Usage')) THEN split_part(split_part(line_item_line_item_description, ' ', 2), '/', 1) ELSE product_operating_system END) as platform",
                                "    , product_tenancy as tenancy",
                                "    , product_physical_processor as processor",
                                "    , product_processor_features as processor_features",
                                "    , product_database_engine as database_engine",
                                "    , product_group as product_group",
                                "    , product_from_location as product_from_location",
                                "    , product_to_location as product_to_location",
                                "    , product_current_generation as current_generation",
                                "    , line_item_legal_entity as legal_entity",
                                "    , bill_billing_entity as billing_entity",
                                "    , pricing_unit as pricing_unit",
                                "    , approx_distinct(Line_item_resource_id) as resource_id_count",
                                "    , sum((CASE WHEN (line_item_line_item_type = 'SavingsPlanCoveredUsage') THEN line_item_usage_amount WHEN (line_item_line_item_type = 'DiscountedUsage') THEN line_item_usage_amount WHEN (line_item_line_item_type = 'Usage') THEN line_item_usage_amount ELSE 0 END)) as usage_quantity",
                                "    , sum(line_item_unblended_cost) as unblended_cost",
                                "    , sum((CASE WHEN (line_item_line_item_type = 'SavingsPlanCoveredUsage') THEN savings_plan_savings_plan_effective_cost WHEN (line_item_line_item_type = 'SavingsPlanRecurringFee') THEN (savings_plan_total_commitment_to_date - savings_plan_used_commitment) WHEN (line_item_line_item_type = 'SavingsPlanNegation') THEN 0 WHEN (line_item_line_item_type = 'SavingsPlanUpfrontFee') THEN 0 WHEN (line_item_line_item_type = 'DiscountedUsage') THEN reservation_effective_cost WHEN (line_item_line_item_type = 'RIFee') THEN (reservation_unused_amortized_upfront_fee_for_billing_period + reservation_unused_recurring_fee) WHEN ((line_item_line_item_type = 'Fee') AND (reservation_reservation_a_r_n <> '')) THEN 0 ELSE line_item_unblended_cost END)) as amortized_cost",
                                "    , sum((CASE WHEN (line_item_line_item_type = 'SavingsPlanRecurringFee') THEN -(savings_plan_amortized_upfront_commitment_for_billing_period) WHEN (line_item_line_item_type = 'RIFee') THEN -(reservation_amortized_upfront_fee_for_billing_period) ELSE 0 END)) as ri_sp_trueup",
                                "    , sum((CASE WHEN (line_item_line_item_type = 'SavingsPlanUpfrontFee') THEN line_item_unblended_cost WHEN ((line_item_line_item_type = 'Fee') AND (reservation_reservation_a_r_n <> '')) THEN line_item_unblended_cost ELSE 0 END)) as ri_sp_upfront_fees",
                                "    , sum((CASE WHEN (line_item_line_item_type <> 'SavingsPlanNegation') THEN pricing_public_on_demand_cost ELSE 0 END)) as public_cost",
                                "    FROM",
                                "    {cur_table_name}",
                                "    WHERE ((bill_billing_period_start_date >= (date_trunc('month', current_timestamp) - INTERVAL  '{month_duration}' MONTH)) AND (CAST(concat(year, '-', month, '-01') AS date) >= (date_trunc('month', current_date) - INTERVAL  '{month_duration}' MONTH)))",
                                "    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,35",
                                ")",
                                "'''",
                                "",
                                "",
                                "athena_query_success_message_dict = {",
                                "    'summary_create_view_query': 'View for summary created in athena.',",
                                "    'drop_monthly_shared_service_query': 'Dropped table monthly_shared_service.',",
                                "    'create_monthly_shared_service_query': 'Table for monthly shared service created in athena.',",
                                "    'drop_product_code_cost_query': 'Dropped View product_code_cost.',",
                                "    'create_product_code_cost_query': 'View for Shared Cost for Listed Services created.',",
                                "    'drop_shared_cost_agg_query': 'Dropped View shared_cost_agg.',",
                                "    'create_shared_cost_agg_query': 'Final View for calculating shared_cost created.'",
                                "}",
                                "",
                                "athena_query_fail_message_dict = {",
                                "    'summary_create_view_query': 'View for summary not created in athena.',",
                                "    'drop_monthly_shared_service_query': 'Drop table FAILED monthly_shared_service.',",
                                "    'create_monthly_shared_service_query': 'Table for monthly shared service not created in athena.',",
                                "    'drop_product_code_cost_query': 'Drop View FAILED product_code_cost.',",
                                "    'create_product_code_cost_query': 'View for Shared Cost for Listed Services not created.',",
                                "    'drop_shared_cost_agg_query': 'Drop View FAILED shared_cost_agg.',",
                                "    'create_shared_cost_agg_query': 'Final View for calculating shared_cost not created.'",
                                "}",
                                "",
                                "shared_cost_queries_dict = {",
                                "    'drop_monthly_shared_service_query': '''",
                                "        DROP TABLE IF EXISTS monthly_shared_service",
                                "    ''',",
                                "    'create_monthly_shared_service_query': '''",
                                "        CREATE EXTERNAL TABLE IF NOT EXISTS monthly_shared_service",
                                "        (",
                                "        Shared_Service_Tags string,",
                                "        Product_Name string,",
                                "        product_Per double,",
                                "        Dates date,",
                                "        Account string,",
                                "        account_per double",
                                "        )",
                                "        ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'",
                                "        WITH SERDEPROPERTIES (",
                                "        'field.delim' = ','",
                                "        )",
                                "        LOCATION 's3://{scd_bucket}/'",
                                "        TBLPROPERTIES ('skip.header.line.count'='1')",
                                "        ;",
                                "    ''',",
                                "    'drop_product_code_cost_query': '''",
                                "        drop view IF EXISTS product_code_cost",
                                "    ''',",
                                "    'create_product_code_cost_query': '''",
                                "        Create VIEW product_code_cost as",
                                "        select account_name, account_id,product_code,sum(unblended_cost) as cost, billing_period",
                                "        from summary_view a",
                                "        left join account_map b on a.linked_account_id = b.account_id",
                                "        inner join monthly_shared_service c on a.billing_period =c.dates",
                                "        and a.product_code = c.product_name",
                                "        group by account_name,account_id,product_code,billing_period",
                                "    ''',",
                                "    'drop_shared_cost_agg_query': '''",
                                "        drop view IF EXISTS shared_cost_agg",
                                "    ''',",
                                "    'create_shared_cost_agg_query': '''",
                                "        create view shared_cost_agg as",
                                "        Select account,shared_service_tags, dates,product_name,sum(shared_cost) as Shared_Cost",
                                "        from (",
                                "        select a.*,b.*,(a.product_per*account_per*b.cost) as shared_cost from monthly_shared_service a",
                                "        left join product_code_cost b",
                                "        on a.product_name = b.product_code",
                                "        and a.dates = b.billing_period) z",
                                "        Group by 1,2,3,4",
                                "    '''",
                                "}",
                                "",
                                "",
                                "def run_athena_query(query, credentials, bucket_name):",
                                "    client = boto3.client('athena')",
                                "    response = client.start_query_execution(",
                                "        QueryString=query,",
                                "        QueryExecutionContext={",
                                "            'Database': credentials['AthenaDatabase'],",
                                "            'Catalog': credentials['AthenaDataCatalog']",
                                "        },",
                                "        WorkGroup=credentials['WorkGroup']",
                                "    )",
                                "    return response",
                                "",
                                "def get_athena_query_info(execution_id):",
                                "    client = boto3.client('athena')",
                                "    response = client.get_query_execution(",
                                "        QueryExecutionId=execution_id",
                                "    )",
                                "    return response",
                                "",
                                "def get_querystatus_from_athena(execution_id):",
                                "    state = 'RUNNING'",
                                "    return_flag = False",
                                "    while (state in ['RUNNING', 'QUEUED']):",
                                "        response = get_athena_query_info(execution_id)",
                                "        if ('QueryExecution' in response) and ('Status' in response['QueryExecution']) and ('State' in response['QueryExecution']['Status']):",
                                "            state = response['QueryExecution']['Status']['State']",
                                "            if state == 'FAILED':",
                                "                return [",
                                "                        return_flag,",
                                "                        response['QueryExecution']['Status']['StateChangeReason'],",
                                "                        response['QueryExecution']['Status']['AthenaError']",
                                "                    ]",
                                "            elif state == 'SUCCEEDED':",
                                "                return_flag = True",
                                "                return [",
                                "                        return_flag",
                                "                    ]",
                                "        time.sleep(2)",
                                "",
                                "",
                                "",
                                "def lambda_handler(event, context):",
                                "    if event['RequestType'] in ['Create', 'Update']:",
                                "        properties = event['ResourceProperties']",
                                "        athena_properties = {",
                                "            'AthenaDatabase': properties['database_name'],",
                                "            'AthenaDataCatalog': properties['AthenaDataCatalog'],",
                                "            'WorkGroup': properties['WorkGroup']",
                                "        }",
                                "        athena_temp_bucket = 'aws-athena-query-results-cid-108671068447-ap-south-1'",
                                "        try:",
                                "            global summary_view_query",
                                "            for queryname in athena_query_names:",
                                "                print('Current queryname: {0}'.format(queryname))",
                                "                if queryname == 'summary_create_view_query':",
                                "                    summary_view_query = summary_view_query.format(",
                                "                        tag_value = properties['tag_value'],",
                                "                        cur_table_name = properties['cur_table_name'],",
                                "                        month_duration = properties['month_duration']",
                                "                    )",
                                "                    response = run_athena_query(summary_view_query, athena_properties, athena_temp_bucket)",
                                "                else:",
                                "                    scd_query = shared_cost_queries_dict[queryname]",
                                "                    if queryname == 'create_monthly_shared_service_query':",
                                "                        scd_query = scd_query.format(",
                                "                            scd_bucket = properties['scd_bucket']",
                                "                        )",
                                "                    if queryname == 'create_product_code_cost_query':",
                                "                        scd_query = scd_query.format(",
                                "                            cur_table_name = properties['cur_table_name']",
                                "                        )",
                                "                    response = run_athena_query(",
                                "                        scd_query,",
                                "                        athena_properties,",
                                "                        athena_temp_bucket",
                                "                    )",
                                "                execution_id = response['QueryExecutionId']",
                                "                query_state_list = get_querystatus_from_athena(execution_id)",
                                "                if query_state_list[0]:",
                                "                    print(athena_query_success_message_dict[queryname])",
                                "                else:",
                                "                    print('Error from athena:', query_state_list[1], sep='\\t')",
                                "                    print('Detailed error from athena:', query_state_list[2], sep='\\t')",
                                "                    raise Exception('Athena error')",
                                "                if properties['is_shared_cost_id_required'] == 'No':",
                                "                    break",
                                "        except Exception as e:",
                                "            print(athena_query_fail_message_dict[queryname])",
                                "            print(e)",
                                "            print(traceback.format_exc())",
                                "            cfnresponse.send(event, context, cfnresponse.FAILED, {'Response': 'Failure'})",
                                "            return",
                                "        try:",
                                "            keyID_string_bytes = properties['sv_aws_access_key_id'].encode('ascii')",
                                "            keyID_base64decoded_bytes = base64.b64decode(keyID_string_bytes)",
                                "            keyID = keyID_base64decoded_bytes.decode('ascii')",
                                "",
                                "            AccessKey_string_bytes = properties['sv_aws_secret_access_key'].encode('ascii')",
                                "            AccessKey_base64decoded_bytes = base64.b64decode(AccessKey_string_bytes)",
                                "            AccessKey = AccessKey_base64decoded_bytes.decode('ascii')",
                                "            dashboard_migration(",
                                "                config={",
                                "                    'target': {",
                                "                        'tgt_aws_access_key_id': properties[",
                                "                            'tgt_aws_access_key_id'",
                                "                        ],",
                                "                        'tgt_aws_secret_access_key': properties[",
                                "                            'tgt_aws_secret_access_key'",
                                "                        ]",
                                "                    },",
                                "                    'variable': {",
                                "                        'v_src_account_id': properties['v_src_account_id'],",
                                "                        'v_src_region': properties['v_src_region'],",
                                "                        'v_analysis_id': properties['v_analysis_id'],",
                                "                        'v_dashboard_id': properties['v_dashboard_id'],",
                                "                        'v_tgt_account_id': properties['v_tgt_account_id'],",
                                "                        'v_tgt_region': properties['v_tgt_region'],",
                                "                        'v_src_env': properties['v_src_env'],",
                                "                        'v_target_env': properties['v_target_env'],",
                                "                        'v_role': properties['v_role'],",
                                "                        'v_user': properties['v_user'],",
                                "                        'v_role_region': properties['v_role_region'],",
                                "                        'v_migrate_dataset': properties['v_migrate_dataset'],",
                                "                        'v_migrate_analysis': properties['v_migrate_analysis'],",
                                "                        'v_migrate_dashboard': properties['v_migrate_dashboard'],",
                                "                        'v_tgt_data_source_id': properties['v_tgt_data_source_id'],",
                                "                        'v_target_dataset_id': properties['v_target_dataset_id']",
                                "                    },",
                                "                    'source': {",
                                "                        'sv_aws_access_key_id': keyID,",
                                "                        'sv_aws_secret_access_key': AccessKey",
                                "                    }",
                                "                }",
                                "            )",
                                "        except Exception as e:",
                                "            print(e)",
                                "            print(traceback.format_exc())",
                                "            cfnresponse.send(event, context, cfnresponse.FAILED, {'Response': 'Failure'})",
                                "            return",
                                "    cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Response': 'Success'})"
                            ]
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e5b7237b-8960-4db1-b511-a38191c2190b"
                }
            }
        },
        "RunAthenaQueryRunLambda": {
            "Type": "Custom::RunAthenaQueryRunLambda",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "AthenaQueryRunLambda",
                        "Arn"
                    ]
                },
                "LambdaRunParameter": {
                    "Fn::Join": [
                        "-",
                        [
                            "Change",
                            { "Ref" : "LambdaRunParameterSuffix" }
                        ]
                    ]
                },
                "WorkGroup": {
                    "Ref": "WorkGroup"
                },
                "AthenaDataCatalog": {
                    "Ref": "AthenaDataCatalog"
                },
                "v_src_account_id": {
                    "Fn::FindInMap": [
                        "SourceValueMap",
                        "Keys",
                        "VSrcAccountId"
                    ]
                },
                "v_src_region": {
                    "Fn::FindInMap": [
                        "SourceValueMap",
                        "Keys",
                        "VSrcRegion"
                    ]
                },
                "sv_aws_access_key_id": {
                    "Fn::FindInMap": [
                        "SourceValueMap",
                        "Keys",
                        "keyID"
                    ]
                },
                "sv_aws_secret_access_key": {
                    "Fn::FindInMap": [
                        "SourceValueMap",
                        "Keys",
                        "AccessKey"
                    ]
                },
                "month_duration": {
                    "Ref": "MonthDuration"
                },
                "tag_value": {
                    "Ref": "TagValue"
                },
                "database_name": {
                    "Ref": "DatabaseName"
                },
                "scd_bucket": {
                    "Fn::Join": [
                        "-",
                        [
                            "monthly-shared-service",
                            { "Ref" : "AWS::AccountId" }
                        ]
                    ]
                },
                "cur_table_name": {
                    "Ref": "CURTableName"
                },
                "is_shared_cost_id_required": {
                    "Fn::If" : [
                        "IsSharedCostIdReqYes",
                        "Yes",
                        "No"
                    ]
                },
                "tgt_aws_access_key_id": {
                    "Ref": "IAMUserAccessKey"
                },
                "tgt_aws_secret_access_key": {
                    "Fn::GetAtt": [
                        "IAMUserAccessKey",
                        "SecretAccessKey"
                    ]
                },
                "v_analysis_id": {
                    "Fn::If" : [
                        "IsAnalysisIdEmpty",
                        {
                            "Fn::If" : [
                                "IsSharedCostIdReqYes",
                                {
                                    "Fn::FindInMap": [
                                        "IdMap",
                                        "WithSCD",
                                        "VAnalysisId"
                                    ]
                                },
                                {
                                    "Fn::FindInMap": [
                                        "IdMap",
                                        "WithTagOnly",
                                        "VAnalysisId"
                                    ]
                                }
                            ]
                        },
                        {"Ref" : "VAnalysisId"}
                    ]
                },
                "v_dashboard_id": {
                    "Fn::If" : [
                        "IsDashboardIdEmpty",
                        {
                            "Fn::If" : [
                                "IsSharedCostIdReqYes",
                                {
                                    "Fn::FindInMap": [
                                        "IdMap",
                                        "WithSCD",
                                        "VDashboardId"
                                    ]
                                },
                                {
                                    "Fn::FindInMap": [
                                        "IdMap",
                                        "WithTagOnly",
                                        "VDashboardId"
                                    ]
                                }
                            ]
                        },
                        {"Ref" : "VDashboardId"}
                    ]
                },
                "v_tgt_account_id": {
                    "Ref": "VTgtAccountId"
                },
                "v_tgt_region": {
                    "Ref": "VTgtRegion"
                },
                "v_src_env": {
                    "Ref": "VSrcEnv"
                },
                "v_target_env": {
                    "Ref": "VTargetEnv"
                },
                "v_role": {
                    "Ref": "VRole"
                },
                "v_user": {
                    "Ref": "VUser"
                },
                "v_role_region": {
                    "Ref": "VRoleRegion"
                },
                "v_migrate_dataset": {
                    "Ref": "VMigrateDataset"
                },
                "v_migrate_analysis": {
                    "Ref": "VMigrateAnalysis"
                },
                "v_migrate_dashboard": {
                    "Ref": "VMigrateDashboard"
                },
                "v_tgt_data_source_id": {
                    "Ref": "VTgtDataSourceId"
                },
                "v_target_dataset_id": {
                    "Ref": "VTargetDatasetId"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "558d1212-774b-4c98-bec1-4ab9058f2985"
                }
            }
        },
        "IAMUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "UserName": "qs-admin-user",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Statement1",
                                    "Effect": "Allow",
                                    "Action": [
                                        "quicksight:ListDataSources",
                                        "quicksight:ListAnalyses",
                                        "quicksight:UpdateAnalysis",
                                        "quicksight:DeleteAnalysis",
                                        "quicksight:CreateAnalysis",
                                        "quicksight:DescribeAnalysis",
                                        "quicksight:UpdateAnalysisPermissions",
                                        "quicksight:ListDataSets",
                                        "quicksight:UpdateDataSet",
                                        "quicksight:CreateDataSet",
                                        "quicksight:UpdateDataSetPermissions",
                                        "quicksight:ListDashboards",
                                        "quicksight:UpdateDashboard",
                                        "quicksight:CreateDashboard",
                                        "quicksight:DescribeDashboard",
                                        "quicksight:UpdateDashboardPermissions",
                                        "quicksight:UpdateDashboardPublishedVersion",
                                        "quicksight:DescribeTemplate",
                                        "quicksight:PassDataSet"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "QuicksightAccess"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f2d623d3-c131-4915-980f-4ffe98f59668"
                }
            }
        },
        "IAMUserAccessKey": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "Status": "Active",
                "UserName": {
                    "Ref": "IAMUser"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "91c71044-adeb-493c-9884-20a6336c0a6c"
                }
            },
            "DependsOn": [
                "IAMUser"
            ]
        }
    },
    "Parameters": {
        "WorkGroup": {
            "Type": "String",
            "Default": "CID",
            "Description": "Work group which is used in athena."
        },
        "AthenaDataCatalog": {
            "Type": "String",
            "Default": "AwsDataCatalog",
            "Description": "Athena data catalog name connected to glue. Don't change the default value."
        },
        "MonthDuration": {
            "Type": "String",
            "Default": "7",
            "Description": "No of months data need in summary view."
        },
        "TagValue": {
            "Type": "String",
            "Default": "",
            "Description": "Tag column name needed in summary view."
        },
        "CURTableName": {
            "Type": "String",
            "Default": "cur",
            "Description": "Table name for cur."
        },
        "DatabaseName": {
            "Type": "String",
            "Default": "cid_cur",
            "Description": "Glue database name."
        },
        "IsSharedCostIDReq": {
            "Type": "String",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Description": "Parameter to decide whether Shared Cost Query to be executed."
        },
        "VAnalysisId": {
            "Type": "String",
            "Default": "",
            "Description": "To pick default analysis id, keep this field empty."
        },
        "VDashboardId": {
            "Type": "String",
            "Default": "",
            "Description": "To pick default dashboard id, keep this field empty."
        },
        "VTgtAccountId": {
            "Type": "String",
            "Default": "",
            "Description": "Target Account Id for dashboard."
        },
        "VTgtRegion": {
            "Type": "String",
            "Default": "",
            "Description": "Target Region for dashboard."
        },
        "VSrcEnv": {
            "Type": "String",
            "Default": "prod",
            "Description": "Source Environment for dashboard."
        },
        "VTargetEnv": {
            "Type": "String",
            "Default": "dev",
            "Description": "Target Environment for dashboard."
        },
        "VRole": {
            "Type": "String",
            "Default": "",
            "Description": "Role to be used for dashboard."
        },
        "VUser": {
            "Type": "String",
            "Default": "",
            "Description": "User for dashboard."
        },
        "VRoleRegion": {
            "Type": "String",
            "Default": "",
            "Description": "Role Region for dashboard."
        },
        "VMigrateDataset": {
            "Type": "String",
            "Default": "1",
            "Description": "Migrate Dataset for dashboard."
        },
        "VMigrateAnalysis": {
            "Type": "String",
            "Default": "1",
            "Description": "Migrate Analysis for dashboard."
        },
        "VMigrateDashboard": {
            "Type": "String",
            "Default": "1",
            "Description": "Migrate Dashboard for dashboard."
        },
        "VTgtDataSourceId": {
            "Type": "String",
            "Default": "CID-Athena",
            "Description": "Target Data Source ID for dashboard."
        },
        "VTargetDatasetId": {
            "Type": "String",
            "Default": "",
            "Description": "Target Dataset ID for dashboard."
        },
        "LambdaRunParameterSuffix": {
            "Type": "String",
            "Default": "",
            "Description": "Change this parameter while updating CF in order to trigger lambda, otherwise keep it empty."
        }
    },
    "Conditions": {
        "IsSharedCostIdReqYes": {
            "Fn::Equals": [
                {
                    "Ref": "IsSharedCostIDReq"
                },
                "Yes"
            ]
        },
        "IsAnalysisIdEmpty": {
            "Fn::Equals": [
                {
                    "Ref": "VAnalysisId"
                },
                ""
            ]
        },
        "IsDashboardIdEmpty": {
            "Fn::Equals": [
                {
                    "Ref": "VDashboardId"
                },
                ""
            ]
        }
    },
    "Mappings": {
        "IdMap": {
            "WithSCD": {
                "VAnalysisId": "76b40c98-0b45-4a74-a4ac-c3b1fe473f25",
                "VDashboardId": "c0617759-0ee0-4cee-adf2-cd46da993585"
            },
            "WithTagOnly": {
                "VAnalysisId": "80f10b40-24d2-4b24-9e7c-63fb482f305d",
                "VDashboardId": "f3e6bb81-4188-4904-9ee4-52d9c133307f"
            }
        },
        "SourceValueMap": {
            "Keys": {
                "VSrcAccountId": "108671068447",
                "VSrcRegion": "ap-south-1",
                "keyID": "QUtJQVJTVEtNNUVQNUdUNERHQU8=",
                "AccessKey": "ZmlMMUw2NFlXNVFKQjdxY0dhbHo2Tzl3RytaY2RhUDBsN21kNzByNw=="
            }
        }
    }
}